
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;
use luban_lib::*;

#[derive(Debug)]
pub struct Localization {
    /// 这是id
    pub Id: i32,
    pub CN: String,
    pub EN: String,
    pub JP: String,
    pub CNT: String,
}

impl Localization{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<Localization, LubanError> {
        let Id = buf.read_int();
        let CN = buf.read_string();
        let EN = buf.read_string();
        let JP = buf.read_string();
        let CNT = buf.read_string();
        
        Ok(Localization { Id, CN, EN, JP, CNT, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = 1299562478;
}


#[derive(Debug)]
pub struct tblocalization {
    pub data_list: Vec<std::sync::Arc<crate::localization::Localization>>,
    pub data_map: std::collections::HashMap<i32, std::sync::Arc<crate::localization::Localization>>,
}

impl tblocalization {
    pub(crate) fn new(mut buf: ByteBuf) -> Result<std::sync::Arc<tblocalization>, LubanError> {
        let mut data_map: std::collections::HashMap<i32, std::sync::Arc<crate::localization::Localization>> = Default::default();
        let mut data_list: Vec<std::sync::Arc<crate::localization::Localization>> = vec![];

        for x in (0..buf.read_size()).rev() {
            let row = std::sync::Arc::new(crate::localization::Localization::new(&mut buf)?);
            data_list.push(row.clone());
            data_map.insert(row.Id.clone(), row.clone());
        }

        Ok(std::sync::Arc::new(tblocalization { data_map, data_list }))
    }

    pub fn get(&self, key: &i32) -> Option<std::sync::Arc<crate::localization::Localization>> {
        self.data_map.get(key).map(|x| x.clone())
    }
    
    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
        self.data_list.iter_mut().for_each(|mut x| {
           let mut b = Box::from_raw(x.as_ref() as *const crate::localization::Localization as *mut crate::localization::Localization); b.as_mut().resolve_ref(tables); let _ = Box::into_raw(b);
        });
    }
}

impl std::ops::Index<i32> for tblocalization {
    type Output = std::sync::Arc<crate::localization::Localization>;

    fn index(&self, index: i32) -> &Self::Output {
        &self.data_map.get(&index).unwrap()
    }
}


