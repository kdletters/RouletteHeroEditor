
/*!
<auto-generated>
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
*/


use super::*;
use luban_lib::*;

#[derive(Debug)]
pub struct RaceAttribute {
    /// 这是id
    pub Id: i32,
    /// 图标
    pub Icon: String,
    /// 多语言ID
    pub NameID: i32,
    /// 描述
    pub DescID: i32,
}

impl RaceAttribute{
    pub(crate) fn new(mut buf: &mut ByteBuf) -> Result<RaceAttribute, LubanError> {
        let Id = buf.read_int();
        let Icon = buf.read_string();
        let NameID = buf.read_int();
        let DescID = buf.read_int();
        
        Ok(RaceAttribute { Id, Icon, NameID, DescID, })
    }    

    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
    }

    pub const __ID__: i32 = 659458280;
}


#[derive(Debug)]
pub struct tbraceattribute {
    pub data_list: Vec<std::sync::Arc<crate::raceattribute::RaceAttribute>>,
    pub data_map: std::collections::HashMap<i32, std::sync::Arc<crate::raceattribute::RaceAttribute>>,
}

impl tbraceattribute {
    pub(crate) fn new(mut buf: ByteBuf) -> Result<std::sync::Arc<tbraceattribute>, LubanError> {
        let mut data_map: std::collections::HashMap<i32, std::sync::Arc<crate::raceattribute::RaceAttribute>> = Default::default();
        let mut data_list: Vec<std::sync::Arc<crate::raceattribute::RaceAttribute>> = vec![];

        for x in (0..buf.read_size()).rev() {
            let row = std::sync::Arc::new(crate::raceattribute::RaceAttribute::new(&mut buf)?);
            data_list.push(row.clone());
            data_map.insert(row.Id.clone(), row.clone());
        }

        Ok(std::sync::Arc::new(tbraceattribute { data_map, data_list }))
    }

    pub fn get(&self, key: &i32) -> Option<std::sync::Arc<crate::raceattribute::RaceAttribute>> {
        self.data_map.get(key).map(|x| x.clone())
    }
    
    pub(crate) unsafe fn resolve_ref(&mut self, tables: &Tables) {
        self.data_list.iter_mut().for_each(|mut x| {
           let mut b = Box::from_raw(x.as_ref() as *const crate::raceattribute::RaceAttribute as *mut crate::raceattribute::RaceAttribute); b.as_mut().resolve_ref(tables); let _ = Box::into_raw(b);
        });
    }
}

impl std::ops::Index<i32> for tbraceattribute {
    type Output = std::sync::Arc<crate::raceattribute::RaceAttribute>;

    fn index(&self, index: i32) -> &Self::Output {
        &self.data_map.get(&index).unwrap()
    }
}


